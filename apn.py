# -*- coding: utf-8 -*-
"""APN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rrBsDa3OXORtEmki5C1SVWNQH0yT02l9
"""

import numpy as np
import numpy.random as rd
import matplotlib.pyplot as plt
import mpl_toolkits
import time
from mpl_toolkits.mplot3d import Axes3D

u = lambda : rd.uniform()
g = lambda : rd.randn()
sqrt = lambda x : np.sqrt(x)
sin = lambda x : np.sin(x)
cos = lambda x : np.cos(x)
exp = lambda x : np.exp(x)


def payfoff_APN(S, r, T, t, coupon_levels, coupon_value, notional, participation):
    flag = True
    n_obs = len(t)
    i = 1
    while( (i < n_obs-1) and flag):
        if (S[i]/S[0] >= coupon_levels[i]):
            payoff = (1 + coupon_value) * notional * exp(-r*(t[i]- t[0]))
            flag = False
        else:
            i += 1
    if ( (i == n_obs-1) and flag):
        payoff = notional * (1 + participation * max(S[n_obs-1]/S[0] - 1, 0)) * exp(-r*(t[i]- t[0]))
    return payoff


def get_payoff_APN(S0, r, sigma, T, t, coupon_levels, coupon_value, notional, participation):
    n_obs = len(t)
    S0walk = n_obs*[0]
    S0walk[0] = S0;
    for k in range(1, n_obs):
        S0walk[k] = S0 * exp( (r - sigma*sigma/2) * (t[k]-t[0])+ sigma * sqrt(t[k]-t[0]) * g());
    return payfoff_APN(S0walk, r, T, t, coupon_levels, coupon_value, notional, participation);


def price_APN(S0, r, sigma, T, t, coupon_levels, coupon_value, notional, participation, Nmc):
    price = 0
    for k in range(Nmc):
        price += get_payoff_APN(S0, r, sigma, T, t, coupon_levels, coupon_value, notional, participation)
    return price/Nmc


def graph_payoff_APN(S0_max, nbS, r, sigma, T, t, coupon_levels, coupon_value, notional, participation, Nmc):
    SO_list = np.linspace(0.01, S0_max, nbS )
    prix_option = nbS*[0]
    for j in range(nbS):
        prix_option[j] = price_APN(SO_list[j], r, sigma, T, t, coupon_levels, coupon_value, notional, participation, Nmc)
    plt.plot( SO_list, prix_option, lw=2, color='blue' )
    plt.xlabel("$S_{0}$")
    plt.ylabel("$V(t=0,S_{0})$")
    plt.title("Evolution du prix d'un APN")
    plt.grid()
    plt.savefig("graph/graphPayOffAPN.png")
    plt.close()


def delta_APN(S0, r, sigma, T, t, coupon_levels, coupon_value, notional, participation, h, Nmc):
    delta = 0
    n_obs = len(t)
    S0walkplus = n_obs * [0]
    S0walkminus = n_obs * [0]
    s_p = S0 + h
    s_m = S0 - h
    for j in range(Nmc):
        S0walkplus[0] = s_p
        S0walkminus[0] = s_m
        for k in range(1, n_obs):
            gauss = g();
            S0walkplus[k] = s_p * exp( (r - sigma*sigma/2) * (t[k]-t[0])+ sigma * sqrt(t[k]-t[0]) * gauss)
            S0walkminus[k] = s_m * exp( (r - sigma*sigma/2) * (t[k]-t[0])+ sigma * sqrt(t[k]-t[0]) * gauss)
        delta += ( payfoff_APN(S0walkplus, r, T, t, coupon_levels, coupon_value, notional, participation) - payfoff_APN(S0walkminus, r, T, t, coupon_levels, coupon_value, notional, participation) ) / (2*h)
    return delta/Nmc


def graph_delta_APN(S0_max, nbS, r, sigma, T, t, coupon_levels, coupon_value, notional, participation, h, Nmc):
    SO_list = np.linspace(3, S0_max, nbS )
    delta_list = nbS*[0]
    for j in range(nbS):
        delta_list[j] = delta_APN(SO_list[j], r, sigma, T, t, coupon_levels, coupon_value, notional, participation, h, Nmc)
    plt.plot( SO_list, delta_list, lw=2, color='blue' )
    plt.xlabel("$S_{0}$")
    plt.ylabel("$delta(t=0,S_{0})$")
    plt.title("Evolution du delta d'un APN")
    plt.grid()
    plt.savefig("graph/graphDeltaAPN.png")
    plt.close()


def gamma_APN(S0, r, sigma, T, t, coupon_levels, coupon_value, notional, participation, h, Nmc):
    gamma = 0
    n_obs = len(t)
    S0walkplus = n_obs * [0]
    S0walkminus = n_obs * [0]
    S0walk = n_obs * [0]
    s_p = S0 + h
    s_m = S0 - h
    for j in range(Nmc):
        S0walkplus[0] = s_p
        S0walkminus[0] = s_m
        S0walk[0] = S0
        for k in range(1, n_obs):
            gauss = g();
            S0walkplus[k] = s_p * exp( (r - sigma*sigma/2) * (t[k]-t[0])+ sigma * sqrt(t[k]-t[0]) * gauss)
            S0walkminus[k] = s_m * exp( (r - sigma*sigma/2) * (t[k]-t[0])+ sigma * sqrt(t[k]-t[0]) * gauss)
            S0walk[k] = S0 * exp( (r - sigma*sigma/2) * (t[k]-t[0])+ sigma * sqrt(t[k]-t[0]) * gauss)
        gamma += ( payfoff_APN(S0walkplus, r, T, t, coupon_levels, coupon_value, notional, participation) + payfoff_APN(S0walkminus, r, T, t, coupon_levels, coupon_value, notional, participation) - 2* payfoff_APN(S0walk, r, T, t, coupon_levels, coupon_value, notional, participation)) / (h*h)
    return gamma/Nmc


def graph_gamma_APN(S0_max, nbS, r, sigma, T, t, coupon_levels, coupon_value, notional, participation, h, Nmc):
    SO_list = np.linspace(3, S0_max, nbS )
    gamma_list = nbS*[0]
    for j in range(nbS):
        gamma_list[j] = gamma_APN(SO_list[j], r, sigma, T, t, coupon_levels, coupon_value, notional, participation, h, Nmc)
    plt.plot( SO_list, gamma_list, lw=2, color='brown' )
    plt.xlabel("$S_{0}$")
    plt.ylabel("$gamma(t=0,S_{0})$")
    plt.title("Evolution du gamma d'un APN")
    plt.grid()
    plt.savefig("graph/graphGammaAPN.png")
    plt.close()


def density(tab):
    tab.sort()
    n_obs = len(tab)
    distribution = n_obs * [0]
    for k in range(1, n_obs+1):
        distribution[k-1] = k/n_obs
    return distribution


def partition(S0, r, sigma, T, t, coupon_levels, coupon_value, notional, participation, Nmc, N, alpha):
    simulation = N * [0]
    V0 = price_APN(S0, r, sigma, T, t, coupon_levels, coupon_value, notional, participation, Nmc)
    for k in range(N):
        simulation[k] = get_payoff_APN(S0, r, sigma, T, t, coupon_levels, coupon_value, notional, participation) - V0
    distribution = density(simulation)
    VaR = simulation[int(alpha * N) - 1]
    dVaR = distribution[int(alpha * N) - 1]

    plt.plot(simulation, distribution, label="", color="black")
    plt.scatter(VaR, dVaR, label= ("VaR = " + str(VaR)), color='red')
    plt.axvline(VaR, color='gray', linestyle='--')
    plt.axhline(dVaR, color='gray', linestyle='--')
    plt.xlabel("$X$")
    plt.ylabel("$F_{X}$")
    plt.title("Distribution of Payoff as a function of $V_{T}-V_{0}$ ")
    plt.grid()
    plt.legend()
    plt.savefig("graph/graphDistributionAPN.png")
    plt.close()


def graph_payoff_APN_sigma(S0, r, sigma_max, nbS, T, t, coupon_levels, coupon_value, notional, participation, Nmc):
    sigma_list = np.linspace(0, sigma_max, nbS )
    prix_option = nbS*[0]
    for j in range(nbS):
        prix_option[j] = price_APN(S0, r, sigma_list[j], T, t, coupon_levels, coupon_value, notional, participation, Nmc)
    plt.plot( sigma_list, prix_option, lw=2, color='blue' )
    plt.xlabel("$sigma$")
    plt.ylabel("$V(t=0,S_{0})$")
    plt.title("Evolution du prix d'un APN")
    plt.grid()
    plt.savefig("graph/graphAPNprice_sigma.png")
    plt.close()

S0_max = 300
S0 = 10
sigma = 0.3
r = 0.02
participation = 250/100
coupon_levels = [0, 110/100, 120/100, 130/100, 140/100, 150/100]
coupon_value = 10/100
T = 5
t = [0, 1, 2, 3, 4, T]
h = 0.1
notional = 10
Nmc = 1000
N = 1000
alpha = 10/100
sigma_max = 4
nbS = 70

price_APN(S0, r, sigma, T, t, coupon_levels, coupon_value, notional, participation, Nmc)

graph_payoff_APN(S0_max, nbS, r, sigma, T, t, coupon_levels, coupon_value, notional, participation, Nmc)

graph_delta_APN(S0_max, nbS, r, sigma, T, t, coupon_levels, coupon_value, notional, participation, h, Nmc)

graph_gamma_APN(S0_max, nbS, r, sigma, T, t, coupon_levels, coupon_value, notional, participation, h, Nmc)

partition(S0, r, sigma, T, t, coupon_levels, coupon_value, notional, participation, Nmc, N, alpha)

graph_payoff_APN_sigma(S0, r, sigma_max, nbS, T, t, coupon_levels, coupon_value, notional, participation, Nmc)