import numpy as np
import matplotlib
import pandas as pd
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
#import time
#import sys


df = pd.read_csv("data/graphPayOffPutDownAndIn.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="green")
plt.xlabel("$S_{0}$")
plt.ylabel("$V(0,S_{0})$")
plt.title("Payoff d'un put down and in en fonction de $S_{0}$")
plt.grid()
plt.legend()
plt.savefig("graph/graphPayOffPutDownAndIn.png")
plt.close()

df = pd.read_csv("data/surfacePayOffPutDownAndIn.csv", sep="\t", header = None)
fig = plt.figure(figsize = (10,7))
ax = plt.axes(projection='3d')
St, t = np.meshgrid(df.iloc[0][1:], df[0][1:])
ax.set_xlabel("$temps t$", fontsize = 11)
ax.set_ylabel("$prix actif S_{t}$", fontsize = 11)
ax.set_zlabel("$V(S_{1}, S_{1})$", fontsize = 10)
ax.set_title("Surface de payoff option Put Down and Ind europ√©en")
ax.plot_surface(t, St, df.iloc[:, 1:].iloc[1:], rstride=1, cstride=1, cmap='plasma', edgecolor='none')
ax.grid()
plt.savefig("graph/surfacePayOffPutDownAndIn.png")
plt.close()

df = pd.read_csv("data/graphDeltaPutDownAndIn.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="brown")
plt.xlabel("$S_{0}$")
plt.ylabel("$delta$")
plt.title("Delta d'un put down and in en fonction de $S_{0}$")
plt.grid()
plt.legend()
plt.savefig("graph/graphDeltaPutDownAndIn.png")
plt.close()

df = pd.read_csv("data/graphGammaPutDownAndIn.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="brown")
plt.xlabel("$S_{0}$")
plt.ylabel("$gamma$")
plt.title("Gamma d'un put down and in en fonction de $S_{0}$")
plt.grid()
plt.legend()
plt.savefig("graph/graphGammaPutDownAndIn.png")
plt.close()

df = pd.read_csv("data/graphAutocallableUnivariate.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="red")
plt.xlabel("$S_{0}$")
plt.ylabel("$V(t=0,S_{0})$")
plt.title("Payoff d'un autocallable univariate$")
plt.grid()
plt.legend()
plt.savefig("graph/graphAutocallableUnivariate.png")
plt.close()

df = pd.read_csv("data/graphDeltaAutocallableUnivariate.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="black")
plt.xlabel("$S_{0}$")
plt.ylabel("$delta(t=0,S_{0})$")
plt.title("Delta d'un autocallable univariate en fonction de $S_{0}$")
plt.grid()
plt.legend()
plt.savefig("graph/graphDeltaAutocallableUnivariate.png")
plt.close()

df = pd.read_csv("data/graphGammaAutocallableUnivariate.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="green")
plt.xlabel("$S_{0}$")
plt.ylabel("$gamma(t=0,S_{0})$")
plt.title("Gamma d'un autocallable univariate en fonction de $S_{0}$")
plt.grid()
plt.legend()
plt.savefig("graph/graphGammaAutocallableUnivariate.png")
plt.close()

df = pd.read_csv("data/surfaceAutocallableBivariate.csv", sep="\t", header = None)
fig = plt.figure(figsize = (10,7))
ax = plt.axes(projection='3d')
St, t = np.meshgrid(df.iloc[0][1:], df[0][1:])
ax.set_xlabel("$S_{1_{0}}$", fontsize = 11)
ax.set_ylabel("$S_{2_{0}}}$", fontsize = 11)
ax.set_zlabel("$V(S_{1}, S_{1})$", fontsize = 10)
ax.set_title("Payoff autocallable bivariate en fonction de $S_{1_{0}},S_{2_{0}}$")
ax.plot_surface(t, St, df.iloc[:, 1:].iloc[1:], rstride=1, cstride=1, cmap='plasma', edgecolor='none')
ax.grid()
plt.savefig("graph/surfaceAutocallableBivariate.png")
plt.close()

df = pd.read_csv("data/graphPricePhoenixFixBarrier.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="brown")
plt.xlabel("$S_{0}$")
plt.ylabel("$V(t=0,S_{0})$")
plt.title("Phoenix Payoff with fix barrier as a function of $S_{0}$")
plt.grid()
plt.legend()
plt.savefig("graph/graphPricePhoenixFixBarrier.png")
plt.close()

df = pd.read_csv("data/graphPricePhoenixProportionalBarrier.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="black")
plt.xlabel("$S_{0}$")
plt.ylabel("$V(t=0,S_{0})$")
plt.title("Phoenix Payoff with proportionnal barrier as a function of $S_{0}$")
plt.grid()
plt.legend()
plt.savefig("graph/graphPricePhoenixProportionalBarrier.png")
plt.close()

df = pd.read_csv("data/graphPricePhoenixCYnotFix.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="orange")
plt.xlabel("$C_{Y}$")
plt.ylabel("$V(t=0,S_{0})$")
plt.title("Phoenix Payoff function of $C_{Y}$")
plt.grid()
plt.legend()
plt.savefig("graph/graphPricePhoenixCYnotFix.png")
plt.close()

df = pd.read_csv("data/graphPricePhoenixCphnotFix.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="grey")
plt.xlabel("$C_{ph}$")
plt.ylabel("$V(t=0,S_{0})$")
plt.title("Phoenix Payoff as a function of $C_{ph}$")
plt.grid()
plt.legend()
plt.savefig("graph/graphPricePhoenixCphnotFix.png")
plt.close()

df = pd.read_csv("data/graphPricePhoenixBphnotFix.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="green")
plt.xlabel("$B_{ph}$")
plt.ylabel("$V(t=0,S_{0})$")
plt.title("Phoenix Payoff as a function of $B_{ph}$")
plt.grid()
plt.legend()
plt.savefig("graph/graphPricePhoenixBphnotFix.png")
plt.close()

df = pd.read_csv("data/graphPricePhoenixBYnotFix.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="orange")
plt.xlabel("$B_{Y}$")
plt.ylabel("$V(t=0,S_{0})$")
plt.title("Phoenix Payoff as a function of $B_{Y}$")
plt.grid()
plt.legend()
plt.savefig("graph/graphPricePhoenixBYnotFix.png")
plt.close()

df = pd.read_csv("data/graphPricePhoenixBputnotFix.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="red")
plt.xlabel("$B_{put}$")
plt.ylabel("$V(t=0,S_{0})$")
plt.title("Phoenix Payoff as a function of $B_{put}$")
plt.grid()
plt.legend()
plt.savefig("graph/graphPricePhoenixBputnotFix.png")
plt.close()

df = pd.read_csv("data/graphPricePhoenixSigmanotFixS0fix.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="brown")
plt.xlabel("$sigma$")
plt.ylabel("$V(t=0,S_{0})$")
plt.title("Phoenix Payoff as a function of $sigma$")
plt.grid()
plt.legend()
plt.savefig("graph/graphPricePhoenixSigmanotFixS0fix.png")
plt.close()

df = pd.read_csv("data/graphPricePhoenixRnotFixS0fix.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="blue")
plt.xlabel("$r$")
plt.ylabel("$V(t=0,S_{0})$")
plt.title("Phoenix Payoff as a function of $r$")
plt.grid()
plt.legend()
plt.savefig("graph/graphPricePhoenixRnotFixS0fix.png")
plt.close()

df = pd.read_csv("data/graphPricePhoenixTnotFixS0fix.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="Price", color="pink")
plt.xlabel("$T$")
plt.ylabel("$V(t=0,S_{0})$")
plt.title("Phoenix Payoff as a function of $T$")
plt.grid()
plt.legend()
plt.savefig("graph/graphPricePhoenixTnotFixS0fix.png")
plt.close()

df = pd.read_csv("data/graphDeltaPhoenixFixBarrier.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="", color="green")
plt.xlabel("$S_{0}$")
plt.ylabel("$delta$")
#plt.legend()
plt.title("Phoenix delta as a function of $S_{0}$")
plt.grid()
plt.savefig("graph/graphDeltaPhoenixFixBarrier.png")
plt.close()


df = pd.read_csv("data/graphGammaPhoenixFixBarrier.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="", color="purple")
plt.xlabel("$S_{0}$")
plt.ylabel("$gamma$")
#plt.legend()
plt.title("Phoenix gamma as a function of $S_{0}$")
plt.grid()
plt.savefig("graph/graphGammaPhoenixFixBarrier.png")
plt.close()

var = pd.read_csv("data/var.csv", sep="\t", header = None)
var = (var[0][0], var[1][0])
df = pd.read_csv("data/distribution.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="", color="black")
plt.scatter(var[0], var[1], label= ("VaR = " + str(var[0])), color='red')
plt.axvline(var[0], color='gray', linestyle='--')
plt.axhline(var[1], color='gray', linestyle='--')
plt.xlabel("$X$")
plt.ylabel("$F_{X}$")
plt.title("Distribution of Payoff as a function of $V_{T}-V_{0}$ ")
plt.grid()
plt.legend()
plt.savefig("graph/distribution.png")
plt.close()

df = pd.read_csv("data/graphVegaPhoenixFixBarrier.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="", color="purple")
plt.xlabel("$S_{0}$")
plt.ylabel("$vega$")
#plt.legend()
plt.title("Phoenix vega as a function of $S_{0}$")
plt.grid()
plt.savefig("graph/graphVegaPhoenixFixBarrier.png")
plt.close()

df = pd.read_csv("data/graphVegaPhoenixSigmanotFixS0fix.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="", color="purple")
plt.xlabel("$sigma$")
plt.ylabel("$vega$")
#plt.legend()
plt.title("Phoenix vega as a function of $sigma$")
plt.grid()
plt.savefig("graph/graphVegaPhoenixSigmanotFixS0fix.png")
plt.close()

df = pd.read_csv("data/graphVegaPhoenixProportionalBarrier.csv", sep="\t", header = None)
plt.plot(df[0], df[1], label="", color="purple")
plt.xlabel("$S_{0}$")
plt.ylabel("$vega$")
#plt.legend()
plt.title("Phoenix vega as a function of $S_{0}$ with proportional barrier")
plt.grid()
plt.savefig("graph/graphVegaPhoenixProportionalBarrier.png")
plt.close()


